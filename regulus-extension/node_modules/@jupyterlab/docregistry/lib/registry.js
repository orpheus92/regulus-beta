"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var algorithm_1 = require("@phosphor/algorithm");
var disposable_1 = require("@phosphor/disposable");
var signaling_1 = require("@phosphor/signaling");
var coreutils_1 = require("@jupyterlab/coreutils");
var default_1 = require("./default");
/**
 * The document registry.
 */
var DocumentRegistry = (function () {
    /**
     * Construct a new document registry.
     */
    function DocumentRegistry(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this._modelFactories = Object.create(null);
        this._widgetFactories = Object.create(null);
        this._defaultWidgetFactory = '';
        this._defaultWidgetFactories = Object.create(null);
        this._widgetFactoryExtensions = Object.create(null);
        this._fileTypes = [];
        this._creators = [];
        this._extenders = Object.create(null);
        this._changed = new signaling_1.Signal(this);
        this._isDisposed = false;
        var factory = options.textModelFactory;
        if (factory && factory.name !== 'text') {
            throw new Error('Text model factory must have the name `text`');
        }
        this._modelFactories['text'] = factory || new default_1.TextModelFactory();
        var fts = options.initialFileTypes || DocumentRegistry.defaultFileTypes;
        fts.forEach(function (ft) {
            var value = __assign({}, DocumentRegistry.fileTypeDefaults, ft);
            _this._fileTypes.push(value);
        });
    }
    Object.defineProperty(DocumentRegistry.prototype, "changed", {
        /**
         * A signal emitted when the registry has changed.
         */
        get: function () {
            return this._changed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DocumentRegistry.prototype, "isDisposed", {
        /**
         * Get whether the document registry has been disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources held by the document registery.
     */
    DocumentRegistry.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        for (var modelName in this._modelFactories) {
            this._modelFactories[modelName].dispose();
        }
        for (var widgetName in this._widgetFactories) {
            this._widgetFactories[widgetName].dispose();
        }
        for (var widgetName in this._extenders) {
            this._extenders[widgetName].length = 0;
        }
        this._fileTypes.length = 0;
        this._creators.length = 0;
        signaling_1.Signal.clearData(this);
    };
    /**
     * Add a widget factory to the registry.
     *
     * @param factory - The factory instance to register.
     *
     * @returns A disposable which will unregister the factory.
     *
     * #### Notes
     * If a factory with the given `'displayName'` is already registered,
     * a warning will be logged, and this will be a no-op.
     * If `'*'` is given as a default extension, the factory will be registered
     * as the global default.
     * If an extension or global default is already registered, this factory
     * will override the existing default.
     */
    DocumentRegistry.prototype.addWidgetFactory = function (factory) {
        var _this = this;
        var name = factory.name.toLowerCase();
        if (this._widgetFactories[name]) {
            console.warn("Duplicate registered factory " + name);
            return new disposable_1.DisposableDelegate(Private.noOp);
        }
        this._widgetFactories[name] = factory;
        for (var _i = 0, _a = factory.defaultFor || []; _i < _a.length; _i++) {
            var ft = _a[_i];
            if (factory.fileTypes.indexOf(ft) === -1) {
                continue;
            }
            if (ft === '*') {
                this._defaultWidgetFactory = name;
            }
            else {
                this._defaultWidgetFactories[ft] = name;
            }
        }
        // For convenience, store a mapping of file type name -> name
        for (var _b = 0, _c = factory.fileTypes; _b < _c.length; _b++) {
            var ft = _c[_b];
            if (!this._widgetFactoryExtensions[ft]) {
                this._widgetFactoryExtensions[ft] = [];
            }
            this._widgetFactoryExtensions[ft].push(name);
        }
        this._changed.emit({
            type: 'widgetFactory',
            name: name,
            change: 'added'
        });
        return new disposable_1.DisposableDelegate(function () {
            delete _this._widgetFactories[name];
            if (_this._defaultWidgetFactory === name) {
                _this._defaultWidgetFactory = '';
            }
            for (var _i = 0, _a = Object.keys(_this._defaultWidgetFactories); _i < _a.length; _i++) {
                var ext = _a[_i];
                if (_this._defaultWidgetFactories[ext] === name) {
                    delete _this._defaultWidgetFactories[ext];
                }
            }
            for (var _b = 0, _c = Object.keys(_this._widgetFactoryExtensions); _b < _c.length; _b++) {
                var ext = _c[_b];
                algorithm_1.ArrayExt.removeFirstOf(_this._widgetFactoryExtensions[ext], name);
                if (_this._widgetFactoryExtensions[ext].length === 0) {
                    delete _this._widgetFactoryExtensions[ext];
                }
            }
            _this._changed.emit({
                type: 'widgetFactory',
                name: name,
                change: 'removed'
            });
        });
    };
    /**
     * Add a model factory to the registry.
     *
     * @param factory - The factory instance.
     *
     * @returns A disposable which will unregister the factory.
     *
     * #### Notes
     * If a factory with the given `name` is already registered, or
     * the given factory is already registered, a warning will be logged
     * and this will be a no-op.
     */
    DocumentRegistry.prototype.addModelFactory = function (factory) {
        var _this = this;
        var name = factory.name.toLowerCase();
        if (this._modelFactories[name]) {
            console.warn("Duplicate registered factory " + name);
            return new disposable_1.DisposableDelegate(Private.noOp);
        }
        this._modelFactories[name] = factory;
        this._changed.emit({
            type: 'modelFactory',
            name: name,
            change: 'added'
        });
        return new disposable_1.DisposableDelegate(function () {
            delete _this._modelFactories[name];
            _this._changed.emit({
                type: 'modelFactory',
                name: name,
                change: 'removed'
            });
        });
    };
    /**
     * Add a widget extension to the registry.
     *
     * @param widgetName - The name of the widget factory.
     *
     * @param extension - A widget extension.
     *
     * @returns A disposable which will unregister the extension.
     *
     * #### Notes
     * If the extension is already registered for the given
     * widget name, a warning will be logged and this will be a no-op.
     */
    DocumentRegistry.prototype.addWidgetExtension = function (widgetName, extension) {
        var _this = this;
        widgetName = widgetName.toLowerCase();
        if (!(widgetName in this._extenders)) {
            this._extenders[widgetName] = [];
        }
        var extenders = this._extenders[widgetName];
        var index = algorithm_1.ArrayExt.firstIndexOf(extenders, extension);
        if (index !== -1) {
            console.warn("Duplicate registered extension for " + widgetName);
            return new disposable_1.DisposableDelegate(Private.noOp);
        }
        this._extenders[widgetName].push(extension);
        this._changed.emit({
            type: 'widgetExtension',
            name: widgetName,
            change: 'added'
        });
        return new disposable_1.DisposableDelegate(function () {
            algorithm_1.ArrayExt.removeFirstOf(_this._extenders[widgetName], extension);
            _this._changed.emit({
                type: 'widgetExtension',
                name: widgetName,
                change: 'removed'
            });
        });
    };
    /**
     * Add a file type to the document registry.
     *
     * @params fileType - The file type object to register.
     *
     * @returns A disposable which will unregister the command.
     *
     * #### Notes
     * These are used to populate the "Create New" dialog.
     */
    DocumentRegistry.prototype.addFileType = function (fileType) {
        var _this = this;
        var value = __assign({}, DocumentRegistry.fileTypeDefaults, fileType);
        this._fileTypes.push(value);
        this._changed.emit({
            type: 'fileType',
            name: value.name,
            change: 'added'
        });
        return new disposable_1.DisposableDelegate(function () {
            algorithm_1.ArrayExt.removeFirstOf(_this._fileTypes, value);
            _this._changed.emit({
                type: 'fileType',
                name: fileType.name,
                change: 'removed'
            });
        });
    };
    /**
     * Add a creator to the registry.
     *
     * @params creator - The file creator object to register.
     *
     * @returns A disposable which will unregister the creator.
     */
    DocumentRegistry.prototype.addCreator = function (creator) {
        var _this = this;
        var index = algorithm_1.ArrayExt.findFirstIndex(this._creators, function (value) {
            return value.name.localeCompare(creator.name) > 0;
        });
        if (index !== -1) {
            algorithm_1.ArrayExt.insert(this._creators, index, creator);
        }
        else {
            this._creators.push(creator);
        }
        this._changed.emit({
            type: 'fileCreator',
            name: creator.name,
            change: 'added'
        });
        return new disposable_1.DisposableDelegate(function () {
            algorithm_1.ArrayExt.removeFirstOf(_this._creators, creator);
            _this._changed.emit({
                type: 'fileCreator',
                name: creator.name,
                change: 'removed'
            });
        });
    };
    /**
     * Get a list of the preferred widget factories.
     *
     * @param path - The file path to filter the results.
     *
     * @returns A new array of widget factories.
     *
     * #### Notes
     * Only the widget factories whose associated model factory have
     * been registered will be returned.
     * The first item is considered the default. The returned iterator
     * has widget factories in the following order:
     * - path-specific default factory
     * - global default factory
     * - all other path-specific factories
     * - all other global factories
     */
    DocumentRegistry.prototype.preferredWidgetFactories = function (path) {
        var _this = this;
        var factories = new Set();
        // Get the ordered matching file types.
        var fts = this.getFileTypesForPath(coreutils_1.PathExt.basename(path));
        // Start with the file type default factories.
        fts.forEach(function (ft) {
            if (ft.name in _this._defaultWidgetFactories) {
                factories.add(_this._defaultWidgetFactories[ft.name]);
            }
        });
        // Add the global default factory.
        if (this._defaultWidgetFactory) {
            factories.add(this._defaultWidgetFactory);
        }
        // Add the file type factories in registration order.
        fts.forEach(function (ft) {
            if (ft.name in _this._widgetFactoryExtensions) {
                algorithm_1.each(_this._widgetFactoryExtensions[ft.name], function (n) {
                    factories.add(n);
                });
            }
        });
        // Add the rest of the global factories, in registration order.
        if ('*' in this._widgetFactoryExtensions) {
            algorithm_1.each(this._widgetFactoryExtensions['*'], function (n) {
                factories.add(n);
            });
        }
        // Construct the return list, checking to make sure the corresponding
        // model factories are registered.
        var factoryList = [];
        factories.forEach(function (name) {
            var factory = _this._widgetFactories[name];
            if (!factory) {
                return;
            }
            var modelName = factory.modelName || 'text';
            if (modelName in _this._modelFactories) {
                factoryList.push(factory);
            }
        });
        return factoryList;
    };
    /**
     * Get the default widget factory for an extension.
     *
     * @param ext - An optional file path to filter the results.
     *
     * @returns The default widget factory for an extension.
     *
     * #### Notes
     * This is equivalent to the first value in [[preferredWidgetFactories]].
     */
    DocumentRegistry.prototype.defaultWidgetFactory = function (path) {
        if (!path) {
            return this._widgetFactories[this._defaultWidgetFactory];
        }
        return this.preferredWidgetFactories(path)[0];
    };
    /**
     * Create an iterator over the widget factories that have been registered.
     *
     * @returns A new iterator of widget factories.
     */
    DocumentRegistry.prototype.widgetFactories = function () {
        var _this = this;
        return algorithm_1.map(Object.keys(this._widgetFactories), function (name) {
            return _this._widgetFactories[name];
        });
    };
    /**
     * Create an iterator over the model factories that have been registered.
     *
     * @returns A new iterator of model factories.
     */
    DocumentRegistry.prototype.modelFactories = function () {
        var _this = this;
        return algorithm_1.map(Object.keys(this._modelFactories), function (name) {
            return _this._modelFactories[name];
        });
    };
    /**
     * Create an iterator over the registered extensions for a given widget.
     *
     * @param widgetName - The name of the widget factory.
     *
     * @returns A new iterator over the widget extensions.
     */
    DocumentRegistry.prototype.widgetExtensions = function (widgetName) {
        widgetName = widgetName.toLowerCase();
        if (!(widgetName in this._extenders)) {
            return algorithm_1.empty();
        }
        return new algorithm_1.ArrayIterator(this._extenders[widgetName]);
    };
    /**
     * Create an iterator over the file types that have been registered.
     *
     * @returns A new iterator of file types.
     */
    DocumentRegistry.prototype.fileTypes = function () {
        return new algorithm_1.ArrayIterator(this._fileTypes);
    };
    /**
     * Create an iterator over the file creators that have been registered.
     *
     * @returns A new iterator of file creatores.
     */
    DocumentRegistry.prototype.creators = function () {
        return new algorithm_1.ArrayIterator(this._creators);
    };
    /**
     * Get a widget factory by name.
     *
     * @param widgetName - The name of the widget factory.
     *
     * @returns A widget factory instance.
     */
    DocumentRegistry.prototype.getWidgetFactory = function (widgetName) {
        return this._widgetFactories[widgetName.toLowerCase()];
    };
    /**
     * Get a model factory by name.
     *
     * @param name - The name of the model factory.
     *
     * @returns A model factory instance.
     */
    DocumentRegistry.prototype.getModelFactory = function (name) {
        return this._modelFactories[name.toLowerCase()];
    };
    /**
     * Get a file type by name.
     */
    DocumentRegistry.prototype.getFileType = function (name) {
        name = name.toLowerCase();
        return algorithm_1.find(this._fileTypes, function (fileType) {
            return fileType.name.toLowerCase() === name;
        });
    };
    /**
     * Get a creator by name.
     */
    DocumentRegistry.prototype.getCreator = function (name) {
        name = name.toLowerCase();
        return algorithm_1.find(this._creators, function (creator) {
            return creator.name.toLowerCase() === name;
        });
    };
    /**
     * Get a kernel preference.
     *
     * @param path - The file path.
     *
     * @param widgetName - The name of the widget factory.
     *
     * @param kernel - An optional existing kernel model.
     *
     * @returns A kernel preference.
     */
    DocumentRegistry.prototype.getKernelPreference = function (path, widgetName, kernel) {
        widgetName = widgetName.toLowerCase();
        var widgetFactory = this._widgetFactories[widgetName];
        if (!widgetFactory) {
            return void 0;
        }
        var modelFactory = this.getModelFactory(widgetFactory.modelName || 'text');
        if (!modelFactory) {
            return void 0;
        }
        var language = modelFactory.preferredLanguage(coreutils_1.PathExt.basename(path));
        var name = kernel && kernel.name;
        var id = kernel && kernel.id;
        return {
            id: id,
            name: name,
            language: language,
            shouldStart: widgetFactory.preferKernel,
            canStart: widgetFactory.canStartKernel
        };
    };
    /**
     * Get the best file type given a contents model.
     *
     * @param model - The contents model of interest.
     *
     * @returns The best matching file type.
     */
    DocumentRegistry.prototype.getFileTypeForModel = function (model) {
        switch (model.type) {
            case 'directory':
                return algorithm_1.find(this._fileTypes, function (ft) { return ft.contentType === 'directory'; }) || DocumentRegistry.defaultDirectoryFileType;
            case 'notebook':
                return algorithm_1.find(this._fileTypes, function (ft) { return ft.contentType === 'notebook'; }) ||
                    DocumentRegistry.defaultNotebookFileType;
            default:
                // Find the best matching extension.
                if (model.name || model.path) {
                    var name_1 = model.name || coreutils_1.PathExt.basename(model.path);
                    var fts = this.getFileTypesForPath(name_1);
                    if (fts.length > 0) {
                        return fts[0];
                    }
                }
                return this.getFileType('text') || DocumentRegistry.defaultTextFileType;
        }
    };
    /**
     * Get the file types that match a file name.
     *
     * @param path - The path of the file.
     *
     * @returns An ordered list of matching file types.
     */
    DocumentRegistry.prototype.getFileTypesForPath = function (path) {
        var fts = [];
        var name = coreutils_1.PathExt.basename(path);
        // Look for a pattern match first.
        var ft = algorithm_1.find(this._fileTypes, function (ft) {
            return ft.pattern && ft.pattern.match(name) !== null;
        });
        if (ft) {
            fts.push(ft);
        }
        // Then look by extension name, starting with the longest
        var ext = Private.extname(name);
        while (ext.length > 1) {
            ft = algorithm_1.find(this._fileTypes, function (ft) { return ft.extensions.indexOf(ext) !== -1; });
            if (ft) {
                fts.push(ft);
            }
            ext = '.' + ext.split('.').slice(2).join('.');
        }
        return fts;
    };
    return DocumentRegistry;
}());
exports.DocumentRegistry = DocumentRegistry;
/**
 * The namespace for the `DocumentRegistry` class statics.
 */
(function (DocumentRegistry) {
    /**
     * The defaults used for a file type.
     */
    DocumentRegistry.fileTypeDefaults = {
        name: 'default',
        extensions: [],
        mimeTypes: [],
        iconClass: 'jp-MaterialIcon jp-FileIcon',
        iconLabel: '',
        contentType: 'file',
        fileFormat: 'text'
    };
    /**
     * The default text file type used by the document registry.
     */
    DocumentRegistry.defaultTextFileType = __assign({}, DocumentRegistry.fileTypeDefaults, { name: 'text', mimeTypes: ['text/plain'], extensions: ['.txt'] });
    /**
     * The default notebook file type used by the document registry.
     */
    DocumentRegistry.defaultNotebookFileType = __assign({}, DocumentRegistry.fileTypeDefaults, { name: 'notebook', mimeTypes: ['application/x-ipynb+json'], extensions: ['.ipynb'], contentType: 'notebook', fileFormat: 'json', iconClass: 'jp-MaterialIcon jp-NotebookIcon' });
    /**
     * The default directory file type used by the document registry.
     */
    DocumentRegistry.defaultDirectoryFileType = __assign({}, DocumentRegistry.fileTypeDefaults, { name: 'directory', extensions: [], mimeTypes: ['text/directory'], contentType: 'directory', iconClass: 'jp-MaterialIcon jp-OpenFolderIcon' });
    /**
     * The default file types used by the document registry.
     */
    DocumentRegistry.defaultFileTypes = [
        DocumentRegistry.defaultTextFileType,
        DocumentRegistry.defaultNotebookFileType,
        DocumentRegistry.defaultDirectoryFileType,
        {
            name: 'markdown',
            extensions: ['.md'],
            mimeTypes: ['text/markdown'],
            iconClass: 'jp-MaterialIcon jp-MarkdownIcon',
        },
        {
            name: 'python',
            extensions: ['.py'],
            mimeTypes: ['text/x-python'],
            iconClass: 'jp-MaterialIcon jp-PythonIcon'
        },
        {
            name: 'json',
            extensions: ['.json'],
            mimeTypes: ['application/json', 'application/x-json'],
            iconClass: 'jp-MaterialIcon jp-JSONIcon'
        },
        {
            name: 'csv',
            extensions: ['.csv'],
            mimeTypes: ['text/csv'],
            iconClass: 'jp-MaterialIcon jp-SpreadsheetIcon'
        },
        {
            name: 'xls',
            extensions: ['.xls'],
            iconClass: 'jp-MaterialIcon jp-SpreadsheetIcon'
        },
        {
            name: 'r',
            mimeTypes: ['text/x-rsrc'],
            extensions: ['.r'],
            iconClass: 'jp-MaterialIcon jp-RKernelIcon'
        },
        {
            name: 'yaml',
            mimeTypes: ['text/x-yaml', 'text/yaml'],
            extensions: ['.yaml', '.yml'],
            iconClass: 'jp-MaterialIcon jp-YamlIcon'
        },
        {
            name: 'svg',
            mimeTypes: ['image/svg+xml'],
            extensions: ['.svg'],
            iconClass: 'jp-MaterialIcon jp-ImageIcon',
            fileFormat: 'base64'
        },
        {
            name: 'tiff',
            mimeTypes: ['image/tiff'],
            extensions: ['.tif', '.tiff'],
            iconClass: 'jp-MaterialIcon jp-ImageIcon',
            fileFormat: 'base64'
        },
        {
            name: 'jpeg',
            mimeTypes: ['image/jpeg'],
            extensions: ['.jpg', '.jpeg'],
            iconClass: 'jp-MaterialIcon jp-ImageIcon',
            fileFormat: 'base64'
        },
        {
            name: 'gif',
            mimeTypes: ['image/gif'],
            extensions: ['.gif'],
            iconClass: 'jp-MaterialIcon jp-ImageIcon',
            fileFormat: 'base64'
        },
        {
            name: 'png',
            mimeTypes: ['image/png'],
            extensions: ['.png'],
            iconClass: 'jp-MaterialIcon jp-ImageIcon',
            fileFormat: 'base64'
        },
        {
            name: 'bmp',
            mimeTypes: ['image/bmp'],
            extensions: ['.bmp'],
            iconClass: 'jp-MaterialIcon jp-ImageIcon',
            fileFormat: 'base64'
        },
        {
            name: 'xbm',
            mimeTypes: ['image/xbm'],
            extensions: ['.xbm'],
            iconClass: 'jp-MaterialIcon jp-ImageIcon',
            fileFormat: 'base64'
        },
        {
            name: 'raw',
            extensions: ['.raw'],
            iconClass: 'jp-MaterialIcon jp-ImageIcon',
            fileFormat: 'base64'
        }
    ];
})(DocumentRegistry = exports.DocumentRegistry || (exports.DocumentRegistry = {}));
exports.DocumentRegistry = DocumentRegistry;
/**
 * A private namespace for DocumentRegistry data.
 */
var Private;
(function (Private) {
    /**
     * Get the extension name of a path.
     *
     * @param file - string.
     *
     * #### Notes
     * Dotted filenames (e.g. `".table.json"` are allowed).
     */
    function extname(path) {
        var parts = coreutils_1.PathExt.basename(path).split('.');
        parts.shift();
        var ext = '.' + parts.join('.');
        return ext.toLowerCase();
    }
    Private.extname = extname;
    /**
     * A no-op function.
     */
    function noOp() { }
    Private.noOp = noOp;
})(Private || (Private = {}));
