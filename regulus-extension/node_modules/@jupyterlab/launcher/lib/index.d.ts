import { IIterator } from '@phosphor/algorithm';
import { Token } from '@phosphor/coreutils';
import { IDisposable } from '@phosphor/disposable';
import { Message } from '@phosphor/messaging';
import { Widget } from '@phosphor/widgets';
import * as vdom from '@phosphor/virtualdom';
import { VDomModel, VDomRenderer } from '@jupyterlab/apputils';
import '../style/index.css';
/**
 * The command IDs used by the launcher plugin.
 */
export declare namespace CommandIDs {
    const show: string;
}
/**
 * The launcher token.
 */
export declare const ILauncher: Token<ILauncher>;
/**
 * The launcher interface.
 */
export interface ILauncher {
    /**
     * Add a command item to the launcher, and trigger re-render event for parent
     * widget.
     *
     * @param options - The specification options for a launcher item.
     *
     * @returns A disposable that will remove the item from Launcher, and trigger
     * re-render event for parent widget.
     *
     */
    add(options: ILauncherItem): IDisposable;
}
/**
 * The specification for a launcher item.
 */
export interface ILauncherItem {
    /**
     * The display name for the launcher item.
     */
    displayName: string;
    /**
     * The callback invoked to launch the item.
     *
     * The callback is invoked with a current working directory and the
     * name of the selected launcher item.  When the function returns
     * the launcher will close.
     */
    callback: (cwd: string, name: string) => Widget | Promise<Widget>;
    /**
     * The icon class for the launcher item.
     *
     * #### Notes
     * This class name will be added to the icon node for the visual
     * representation of the launcher item.
     *
     * Multiple class names can be separated with white space.
     *
     * The default value is an empty string.
     */
    iconClass?: string;
    /**
     * The icon label for the launcher item.
     *
     * #### Notes
     * This label will be added as text to the icon node for the visual
     * representation of the launcher item.
     *
     * The default value is an empty string.
     */
    iconLabel?: string;
    /**
     * The identifier for the launcher item.
     *
     * The default value is the displayName.
     */
    name?: string;
    /**
     * The category for the launcher item.
     *
     * The default value is the an empty string.
     */
    category?: string;
    /**
     * The rank for the launcher item.
     *
     * The rank is used when ordering launcher items for display. After grouping
     * into categories, items are sorted in the following order:
     *   1. Rank (lower is better)
     *   3. Display Name (locale order)
     *
     * The default rank is `Infinity`.
     */
    rank?: number;
    /**
     * For items that have a kernel associated with them, the URL of the kernel
     * icon.
     *
     * This is not a CSS class, but the URL that points to the icon in the kernel
     * spec.
     */
    kernelIconUrl?: string;
}
/**
 * LauncherModel keeps track of the path to working directory and has a list of
 * LauncherItems, which the Launcher will render.
 */
export declare class LauncherModel extends VDomModel implements ILauncher {
    /**
     * Create a new launcher model.
     */
    constructor();
    /**
     * Add a command item to the launcher, and trigger re-render event for parent
     * widget.
     *
     * @param options - The specification options for a launcher item.
     *
     * @returns A disposable that will remove the item from Launcher, and trigger
     * re-render event for parent widget.
     *
     */
    add(options: ILauncherItem): IDisposable;
    /**
     * Return an iterator of launcher items.
     */
    items(): IIterator<ILauncherItem>;
    private _items;
}
/**
 * A virtual-DOM-based widget for the Launcher.
 */
export declare class Launcher extends VDomRenderer<LauncherModel> {
    /**
     * Construct a new launcher widget.
     */
    constructor(options: Launcher.IOptions);
    /**
     * The cwd of the launcher.
     */
    readonly cwd: string;
    /**
     * Whether there is a pending item being launched.
     */
    pending: boolean;
    /**
     * Handle `'activate-request'` messages.
     */
    protected onActivateRequest(msg: Message): void;
    /**
     * Render the launcher to virtual DOM nodes.
     */
    protected render(): vdom.VirtualNode | vdom.VirtualNode[];
    private _callback;
    private _pending;
}
/**
 * The namespace for `Launcher` class statics.
 */
export declare namespace Launcher {
    /**
     * The options used to create a Launcher.
     */
    interface IOptions {
        /**
         * The cwd of the launcher.
         */
        cwd: string;
        /**
         * The callback used when an item is launched.
         */
        callback: (widget: Widget) => void;
    }
}
