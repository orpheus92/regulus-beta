"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var widgets_1 = require("@phosphor/widgets");
var latex_1 = require("./latex");
var renderers = require("./renderers");
/**
 * A common base class for mime renderers.
 */
var RenderedCommon = (function (_super) {
    __extends(RenderedCommon, _super);
    /**
     * Construct a new rendered common widget.
     *
     * @param options - The options for initializing the widget.
     */
    function RenderedCommon(options) {
        var _this = _super.call(this) || this;
        _this.mimeType = options.mimeType;
        _this.sanitizer = options.sanitizer;
        _this.resolver = options.resolver;
        _this.linkHandler = options.linkHandler;
        _this.node.dataset['mimeType'] = _this.mimeType;
        return _this;
    }
    /**
     * Render a mime model.
     *
     * @param model - The mime model to render.
     *
     * @returns A promise which resolves when rendering is complete.
     */
    RenderedCommon.prototype.renderModel = function (model) {
        // TODO compare model against old model for early bail?
        // Toggle the trusted class on the widget.
        this.toggleClass('jp-mod-trusted', model.trusted);
        // Render the actual content.
        return this.render(model);
    };
    return RenderedCommon;
}(widgets_1.Widget));
exports.RenderedCommon = RenderedCommon;
/**
 * A common base class for HTML mime renderers.
 */
var RenderedHTMLCommon = (function (_super) {
    __extends(RenderedHTMLCommon, _super);
    /**
     * Construct a new rendered HTML common widget.
     *
     * @param options - The options for initializing the widget.
     */
    function RenderedHTMLCommon(options) {
        var _this = _super.call(this, options) || this;
        _this.addClass('jp-RenderedHTMLCommon');
        return _this;
    }
    return RenderedHTMLCommon;
}(RenderedCommon));
exports.RenderedHTMLCommon = RenderedHTMLCommon;
/**
 * A mime renderer for displaying HTML and math.
 */
var RenderedHTML = (function (_super) {
    __extends(RenderedHTML, _super);
    /**
     * Construct a new rendered HTML widget.
     *
     * @param options - The options for initializing the widget.
     */
    function RenderedHTML(options) {
        var _this = _super.call(this, options) || this;
        _this.addClass('jp-RenderedHTML');
        return _this;
    }
    /**
     * Render a mime model.
     *
     * @param model - The mime model to render.
     *
     * @returns A promise which resolves when rendering is complete.
     */
    RenderedHTML.prototype.render = function (model) {
        return renderers.renderHTML({
            host: this.node,
            source: String(model.data[this.mimeType]),
            trusted: model.trusted,
            resolver: this.resolver,
            sanitizer: this.sanitizer,
            linkHandler: this.linkHandler,
            shouldTypeset: this.isAttached
        });
    };
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    RenderedHTML.prototype.onAfterAttach = function (msg) {
        latex_1.typeset(this.node);
    };
    return RenderedHTML;
}(RenderedHTMLCommon));
exports.RenderedHTML = RenderedHTML;
/**
 * A mime renderer for displaying LaTeX output.
 */
var RenderedLatex = (function (_super) {
    __extends(RenderedLatex, _super);
    /**
     * Construct a new rendered Latex widget.
     *
     * @param options - The options for initializing the widget.
     */
    function RenderedLatex(options) {
        var _this = _super.call(this, options) || this;
        _this.addClass('jp-RenderedLatex');
        return _this;
    }
    /**
     * Render a mime model.
     *
     * @param model - The mime model to render.
     *
     * @returns A promise which resolves when rendering is complete.
     */
    RenderedLatex.prototype.render = function (model) {
        return renderers.renderLatex({
            host: this.node,
            source: String(model.data[this.mimeType]),
            shouldTypeset: this.isAttached
        });
    };
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    RenderedLatex.prototype.onAfterAttach = function (msg) {
        latex_1.typeset(this.node);
    };
    return RenderedLatex;
}(RenderedCommon));
exports.RenderedLatex = RenderedLatex;
/**
 * A mime renderer for displaying images.
 */
var RenderedImage = (function (_super) {
    __extends(RenderedImage, _super);
    /**
     * Construct a new rendered image widget.
     *
     * @param options - The options for initializing the widget.
     */
    function RenderedImage(options) {
        var _this = _super.call(this, options) || this;
        _this.addClass('jp-RenderedImage');
        return _this;
    }
    /**
     * Render a mime model.
     *
     * @param model - The mime model to render.
     *
     * @returns A promise which resolves when rendering is complete.
     */
    RenderedImage.prototype.render = function (model) {
        var metadata = model.metadata[this.mimeType];
        return renderers.renderImage({
            host: this.node,
            mimeType: this.mimeType,
            source: String(model.data[this.mimeType]),
            width: metadata && metadata.width,
            height: metadata && metadata.height,
            unconfined: metadata && metadata.unconfined
        });
    };
    return RenderedImage;
}(RenderedCommon));
exports.RenderedImage = RenderedImage;
/**
 * A mime renderer for displaying Markdown with embeded latex.
 */
var RenderedMarkdown = (function (_super) {
    __extends(RenderedMarkdown, _super);
    /**
     * Construct a new rendered markdown widget.
     *
     * @param options - The options for initializing the widget.
     */
    function RenderedMarkdown(options) {
        var _this = _super.call(this, options) || this;
        _this.addClass('jp-RenderedMarkdown');
        return _this;
    }
    /**
     * Render a mime model.
     *
     * @param model - The mime model to render.
     *
     * @returns A promise which resolves when rendering is complete.
     */
    RenderedMarkdown.prototype.render = function (model) {
        return renderers.renderMarkdown({
            host: this.node,
            source: String(model.data[this.mimeType]),
            trusted: model.trusted,
            resolver: this.resolver,
            sanitizer: this.sanitizer,
            linkHandler: this.linkHandler,
            shouldTypeset: this.isAttached
        });
    };
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    RenderedMarkdown.prototype.onAfterAttach = function (msg) {
        latex_1.typeset(this.node);
    };
    return RenderedMarkdown;
}(RenderedHTMLCommon));
exports.RenderedMarkdown = RenderedMarkdown;
/**
 * A widget for displaying SVG content.
 */
var RenderedSVG = (function (_super) {
    __extends(RenderedSVG, _super);
    /**
     * Construct a new rendered SVG widget.
     *
     * @param options - The options for initializing the widget.
     */
    function RenderedSVG(options) {
        var _this = _super.call(this, options) || this;
        _this.addClass('jp-RenderedSVG');
        return _this;
    }
    /**
     * Render a mime model.
     *
     * @param model - The mime model to render.
     *
     * @returns A promise which resolves when rendering is complete.
     */
    RenderedSVG.prototype.render = function (model) {
        var metadata = model.metadata[this.mimeType];
        return renderers.renderSVG({
            host: this.node,
            source: String(model.data[this.mimeType]),
            trusted: model.trusted,
            resolver: this.resolver,
            linkHandler: this.linkHandler,
            shouldTypeset: this.isAttached,
            unconfined: metadata && metadata.unconfined
        });
    };
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    RenderedSVG.prototype.onAfterAttach = function (msg) {
        latex_1.typeset(this.node);
    };
    return RenderedSVG;
}(RenderedCommon));
exports.RenderedSVG = RenderedSVG;
/**
 * A widget for displaying plain text and console text.
 */
var RenderedText = (function (_super) {
    __extends(RenderedText, _super);
    /**
     * Construct a new rendered text widget.
     *
     * @param options - The options for initializing the widget.
     */
    function RenderedText(options) {
        var _this = _super.call(this, options) || this;
        _this.addClass('jp-RenderedText');
        return _this;
    }
    /**
     * Render a mime model.
     *
     * @param model - The mime model to render.
     *
     * @returns A promise which resolves when rendering is complete.
     */
    RenderedText.prototype.render = function (model) {
        return renderers.renderText({
            host: this.node,
            source: String(model.data[this.mimeType])
        });
    };
    return RenderedText;
}(RenderedCommon));
exports.RenderedText = RenderedText;
/**
 * A widget for displaying deprecated JavaScript output.
 */
var RenderedJavaScript = (function (_super) {
    __extends(RenderedJavaScript, _super);
    /**
     * Construct a new rendered text widget.
     *
     * @param options - The options for initializing the widget.
     */
    function RenderedJavaScript(options) {
        var _this = _super.call(this, options) || this;
        _this.addClass('jp-RenderedJavaScript');
        return _this;
    }
    /**
     * Render a mime model.
     *
     * @param model - The mime model to render.
     *
     * @returns A promise which resolves when rendering is complete.
     */
    RenderedJavaScript.prototype.render = function (model) {
        return renderers.renderText({
            host: this.node,
            source: 'JavaScript output is disabled in JupyterLab'
        });
    };
    return RenderedJavaScript;
}(RenderedCommon));
exports.RenderedJavaScript = RenderedJavaScript;
