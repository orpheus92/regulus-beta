"use strict";
/*-----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var apputils_1 = require("@jupyterlab/apputils");
var virtualdom_1 = require("@phosphor/virtualdom");
/**
 * The CSS class added to all collapsers.
 */
var COLLAPSER_CLASS = 'jp-Collapser';
/**
 * The CSS class added to the collapser child.
 */
var COLLAPSER_CHILD_CLASS = 'jp-Collapser-child';
/**
 * The CSS class added to input collapsers.
 */
var INPUT_COLLAPSER = 'jp-InputCollapser';
/**
 * The CSS class added to output collapsers.
 */
var OUTPUT_COLLAPSER = 'jp-OutputCollapser';
/**
 * The CSS class added the collapser child when collapsed.
 */
var MOD_COLLAPSED_CLASS = 'jp-mod-collapsed';
/**
 * Abstract collapser base class.
 *
 * ### Notes
 * A collapser is a visible div to the left of a cell's
 * input/output that a user can click on to collapse the
 * input/output.
 */
var Collapser = (function (_super) {
    __extends(Collapser, _super);
    /**
     * Construct a new collapser.
     */
    function Collapser() {
        var _this = _super.call(this) || this;
        _this.addClass(COLLAPSER_CLASS);
        return _this;
    }
    Object.defineProperty(Collapser.prototype, "collapsed", {
        /**
         * Is the input/output of the parent collapsed.
         */
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Render the collapser with the virtual DOM.
     */
    Collapser.prototype.render = function () {
        var _this = this;
        var childClass = COLLAPSER_CHILD_CLASS;
        if (this.collapsed) {
            childClass += " " + MOD_COLLAPSED_CLASS;
        }
        return (virtualdom_1.h("div", { className: childClass, onclick: function (e) { return _this.handleClick(e); } }));
    };
    return Collapser;
}(apputils_1.VDomRenderer));
exports.Collapser = Collapser;
/**
 * A collapser subclass to collapse a cell's input area.
 */
var InputCollapser = (function (_super) {
    __extends(InputCollapser, _super);
    /**
     * Construct a new input collapser.
     */
    function InputCollapser() {
        var _this = _super.call(this) || this;
        _this.addClass(INPUT_COLLAPSER);
        return _this;
    }
    Object.defineProperty(InputCollapser.prototype, "collapsed", {
        /**
         * Is the cell's input collapsed?
         */
        get: function () {
            var cell = this.parent.parent;
            if (cell) {
                return cell.inputHidden;
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handle a click event for the user to collapse the cell's input.
     */
    InputCollapser.prototype.handleClick = function (e) {
        var cell = this.parent.parent;
        if (cell) {
            cell.inputHidden = !cell.inputHidden;
        }
        /* We need this until we watch the cell state */
        this.update();
    };
    return InputCollapser;
}(Collapser));
exports.InputCollapser = InputCollapser;
/**
 * A collapser subclass to collapse a cell's output area.
 */
var OutputCollapser = (function (_super) {
    __extends(OutputCollapser, _super);
    /**
     * Construct a new output collapser.
     */
    function OutputCollapser() {
        var _this = _super.call(this) || this;
        _this.addClass(OUTPUT_COLLAPSER);
        return _this;
    }
    Object.defineProperty(OutputCollapser.prototype, "collapsed", {
        /**
         * Is the cell's output collapsed?
         */
        get: function () {
            var cell = this.parent.parent;
            if (cell) {
                return cell.outputHidden;
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handle a click event for the user to collapse the cell's output.
     */
    OutputCollapser.prototype.handleClick = function (e) {
        var cell = this.parent.parent;
        if (cell) {
            cell.outputHidden = !cell.outputHidden;
        }
        /* We need this until we watch the cell state */
        this.update();
    };
    return OutputCollapser;
}(Collapser));
exports.OutputCollapser = OutputCollapser;
