"use strict";
/*-----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var widgets_1 = require("@phosphor/widgets");
var widgets_2 = require("@phosphor/widgets");
var codeeditor_1 = require("@jupyterlab/codeeditor");
var codemirror_1 = require("@jupyterlab/codemirror");
/**
 * The class name added to input area widgets.
 */
var INPUT_AREA_CLASS = 'jp-InputArea';
/**
 * The class name added to the prompt area of cell.
 */
var INPUT_AREA_PROMPT_CLASS = 'jp-InputArea-prompt';
/**
 * The class name added to OutputPrompt.
 */
var INPUT_PROMPT_CLASS = 'jp-InputPrompt';
/**
 * The class name added to the editor area of the cell.
 */
var INPUT_AREA_EDITOR_CLASS = 'jp-InputArea-editor';
/******************************************************************************
 * InputArea
 ******************************************************************************/
/**
 * An input area widget, which hosts a prompt and an editor widget.
 */
var InputArea = (function (_super) {
    __extends(InputArea, _super);
    /**
     * Construct an input area widget.
     */
    function InputArea(options) {
        var _this = _super.call(this) || this;
        _this._prompt = null;
        _this._editor = null;
        _this._rendered = null;
        _this.addClass(INPUT_AREA_CLASS);
        var model = _this.model = options.model;
        var contentFactory = _this.contentFactory = (options.contentFactory || InputArea.defaultContentFactory);
        // Prompt
        var prompt = _this._prompt = contentFactory.createInputPrompt();
        prompt.addClass(INPUT_AREA_PROMPT_CLASS);
        // Editor
        var editorOptions = { model: model, factory: contentFactory.editorFactory };
        var editor = _this._editor = new codeeditor_1.CodeEditorWrapper(editorOptions);
        editor.addClass(INPUT_AREA_EDITOR_CLASS);
        var layout = _this.layout = new widgets_1.PanelLayout();
        layout.addWidget(prompt);
        layout.addWidget(editor);
        return _this;
    }
    Object.defineProperty(InputArea.prototype, "editorWidget", {
        /**
         * Get the CodeEditorWrapper used by the cell.
         */
        get: function () {
            return this._editor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputArea.prototype, "editor", {
        /**
         * Get the CodeEditor used by the cell.
         */
        get: function () {
            return this._editor.editor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputArea.prototype, "promptNode", {
        /**
         * Get the prompt node used by the cell.
         */
        get: function () {
            return this._prompt.node;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Render an input instead of the text editor.
     */
    InputArea.prototype.renderInput = function (widget) {
        var layout = this.layout;
        if (this._rendered) {
            this._rendered.parent = null;
        }
        this._editor.hide();
        this._rendered = widget;
        layout.addWidget(widget);
    };
    /**
     * Show the text editor.
     */
    InputArea.prototype.showEditor = function () {
        if (this._rendered) {
            this._rendered.parent = null;
        }
        this._editor.show();
    };
    /**
     * Set the prompt of the input area.
     */
    InputArea.prototype.setPrompt = function (value) {
        this._prompt.executionCount = value;
    };
    /**
     * Dispose of the resources held by the widget.
     */
    InputArea.prototype.dispose = function () {
        // Do nothing if already disposed.
        if (this.isDisposed) {
            return;
        }
        this._prompt = null;
        this._editor = null;
        this._rendered = null;
        _super.prototype.dispose.call(this);
    };
    return InputArea;
}(widgets_2.Widget));
exports.InputArea = InputArea;
/**
 * A namespace for `InputArea` statics.
 */
(function (InputArea) {
    /**
     * Default implementation of `IContentFactory`.
     *
     * This defaults to using an `editorFactory` based on CodeMirror.
     */
    var ContentFactory = (function () {
        /**
         * Construct a `ContentFactory`.
         */
        function ContentFactory(options) {
            if (options === void 0) { options = {}; }
            this._editor = null;
            this._editor = (options.editorFactory || InputArea.defaultEditorFactory);
        }
        Object.defineProperty(ContentFactory.prototype, "editorFactory", {
            /**
             * Return the `CodeEditor.Factory` being used.
             */
            get: function () {
                return this._editor;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Create an input prompt.
         */
        ContentFactory.prototype.createInputPrompt = function () {
            return new InputPrompt();
        };
        return ContentFactory;
    }());
    InputArea.ContentFactory = ContentFactory;
    /**
     * A function to create the default CodeMirror editor factory.
     */
    function _createDefaultEditorFactory() {
        var editorServices = new codemirror_1.CodeMirrorEditorFactory();
        return editorServices.newInlineEditor.bind(editorServices);
    }
    /**
     * The default editor factory singleton based on CodeMirror.
     */
    InputArea.defaultEditorFactory = _createDefaultEditorFactory();
    /**
     * The default `ContentFactory` instance.
     */
    InputArea.defaultContentFactory = new ContentFactory({});
})(InputArea = exports.InputArea || (exports.InputArea = {}));
exports.InputArea = InputArea;
/**
 * The default input prompt implementation.
 */
var InputPrompt = (function (_super) {
    __extends(InputPrompt, _super);
    /*
     * Create an output prompt widget.
     */
    function InputPrompt() {
        var _this = _super.call(this) || this;
        _this._executionCount = null;
        _this.addClass(INPUT_PROMPT_CLASS);
        return _this;
    }
    Object.defineProperty(InputPrompt.prototype, "executionCount", {
        /**
         * The execution count for the prompt.
         */
        get: function () {
            return this._executionCount;
        },
        set: function (value) {
            this._executionCount = value;
            if (value === null) {
                this.node.textContent = ' ';
            }
            else {
                this.node.textContent = "In [" + (value || ' ') + "]:";
            }
        },
        enumerable: true,
        configurable: true
    });
    return InputPrompt;
}(widgets_2.Widget));
exports.InputPrompt = InputPrompt;
