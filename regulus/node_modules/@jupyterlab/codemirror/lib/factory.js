"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var editor_1 = require("./editor");
/**
 * CodeMirror editor factory.
 */
var CodeMirrorEditorFactory = (function () {
    /**
     * Construct an IEditorFactoryService for CodeMirrorEditors.
     */
    function CodeMirrorEditorFactory(defaults) {
        if (defaults === void 0) { defaults = {}; }
        this.inlineCodeMirrorConfig = __assign({}, editor_1.CodeMirrorEditor.defaultConfig, { extraKeys: {
                'Cmd-Right': 'goLineRight',
                'End': 'goLineRight',
                'Cmd-Left': 'goLineLeft',
                'Tab': 'indentMoreOrinsertTab',
                'Shift-Tab': 'indentLess',
                'Cmd-Alt-[': 'indentAuto',
                'Ctrl-Alt-[': 'indentAuto',
                'Cmd-/': 'toggleComment',
                'Ctrl-/': 'toggleComment',
            } }, defaults);
        this.documentCodeMirrorConfig = __assign({}, editor_1.CodeMirrorEditor.defaultConfig, { extraKeys: {
                'Tab': 'indentMoreOrinsertTab',
                'Shift-Enter': function () { }
            }, lineNumbers: true }, defaults);
    }
    /**
     * Create a new editor for inline code.
     */
    CodeMirrorEditorFactory.prototype.newInlineEditor = function (options) {
        return new editor_1.CodeMirrorEditor(__assign({}, options, { config: __assign({}, this.inlineCodeMirrorConfig, options.config || {}) }));
    };
    /**
     * Create a new editor for a full document.
     */
    CodeMirrorEditorFactory.prototype.newDocumentEditor = function (options) {
        return new editor_1.CodeMirrorEditor(__assign({}, options, { config: __assign({}, this.documentCodeMirrorConfig, options.config || {}) }));
    };
    return CodeMirrorEditorFactory;
}());
exports.CodeMirrorEditorFactory = CodeMirrorEditorFactory;
